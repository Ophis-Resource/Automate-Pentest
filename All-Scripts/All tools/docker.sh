#!/bin/bash

# List of tools and their installation methods
declare -A tools
tools=(
    ["jok3r"]="sudo apt-get install jok3r -y"
    ["openscap"]="sudo apt-get install openscap -y"
    ["scapy"]="sudo apt-get install python3-scapy -y"
    ["crackstation"]="git clone https://github.com/crackdome/crackstation.git"
    ["legion"]="git clone https://github.com/GoVanguard/Legion.git"
    ["evolvept"]="git clone https://github.com/2ndFaze/EvolvePT.git"
    ["wapiti"]="sudo apt-get install wapiti -y"
    ["fierce"]="sudo apt-get install fierce -y"
    ["unnicornscan"]="git clone https://github.com/Unicornscan/Unicornscan.git"
    ["docker-bench-security"]="git clone https://github.com/docker/docker-bench-security.git"
    ["grype"]="sudo apt-get install grype -y"
    ["cdk"]="sudo apt-get install cdk -y"
    ["runc"]="sudo apt-get install runc -y"
    ["clair"]="git clone https://github.com/quay/clair.git"
    ["amicontained"]="git clone https://github.com/amicontained/amicontained.git"
    ["dockscan"]="git clone https://github.com/simonbates/dockscan.git"
    ["dockerfile-linter"]="sudo apt-get install dockerfile-linter -y"
    ["dockerlint"]="git clone https://github.com/alternante/dockerlint.git"
    ["hadolint"]="wget https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64 -O /usr/local/bin/hadolint && chmod +x /usr/local/bin/hadolint"
    ["falco"]="sudo apt-get install falco -y"
    ["trivy"]="sudo apt-get install trivy -y"
    ["synk"]="sudo apt-get install synk -y"
    ["manageengine"]="wget https://www.manageengine.com/downloads/manageengine.zip -O manageengine.zip && unzip manageengine.zip"
    ["dockerscout"]="git clone https://github.com/docker/docker-scout.git"
    ["lynis"]="sudo apt-get install lynis -y"
    ["anchore-engine"]="git clone https://github.com/anchore/anchore-engine.git"
    ["dagda"]="git clone https://github.com/avast/dagda.git"
    ["syft"]="sudo apt-get install syft -y"
    ["deepce"]="git clone https://github.com/deepce/deepce.git"
    ["dockle"]="wget https://github.com/goodwithtech/dockle/releases/download/v0.3.0/dockle-linux-amd64-0.3.0.tar.gz && tar -xvf dockle-linux-amd64-0.3.0.tar.gz && mv dockle /usr/local/bin/"
    ["uniscan"]="sudo apt-get install uniscan -y"
    ["golismero"]="git clone https://github.com/golismero/golismero.git"
    ["apiclarity"]="git clone https://github.com/arachnys/apiclarity.git"
)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Install tools
echo "Starting tool installation..."
for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."

# Docker container management and scanning
echo ""
read -p "Do you want to run Docker containers for scanning? (y/n): " run_containers

if [[ "$run_containers" == "y" || "$run_containers" == "Y" ]]; then
    echo "Running Docker containers..."
    
    # Ensure Docker is installed
    if ! command -v docker &> /dev/null; then
        echo "Docker is not installed. Installing Docker..."
        sudo apt-get install docker.io -y
        sudo systemctl start docker
        sudo systemctl enable docker
    fi
    
    # Start containers (example container names, adjust as needed)
    docker run -d --name test-container1 nginx
    docker run -d --name test-container2 httpd

    echo "Containers are running. Performing scans..."

    # Perform scans on running containers (example commands, adjust as needed)
    for container in $(docker ps -q); do
        echo "Scanning container ID: $container"
        
        # Example scan commands (adjust based on your tools)
        docker exec "$container" jok3r scan
        docker exec "$container" grype scan
        docker exec "$container" trivy scan
        docker exec "$container" hadolint /path/to/Dockerfile
        # Add more scan commands as necessary
    done

    echo "Scans completed."
else
    echo "Skipping Docker container management and scans."
fi
