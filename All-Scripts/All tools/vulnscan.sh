#!/bin/bash


# List of tools and their installation methods
declare -A tools
tools=(
    ["OpenVAS"]="apt-get install openvas -y && gvm-setup"
    ["w3af"]="git clone https://github.com/andresriancho/w3af.git && cd w3af && pip install -r requirements.txt"
    ["owaspzap"]="apt-get install zaproxy -y"
    ["nikto"]="apt-get install nikto -y"
    ["burpsuite"]="wget https://portswigger-cdn.net/burp/releases/download?product=community&version=2024.6.2&type=jar -O burpsuite.jar"
    ["Nessus"]="echo 'Please download Nessus from https://www.tenable.com/downloads/nessus and follow installation instructions manually.'"
    ["qualys"]="echo 'Qualys is a commercial tool; please visit https://www.qualys.com/ to download and install manually.'"
    ["gfi landguard"]="echo 'GFI LandGuard is a commercial tool; please visit https://www.gfi.com/products-and-solutions/network-security-solutions/gfi-landguard/ to download and install manually.'"
    ["acunetix"]="echo 'Acunetix is a commercial tool; please visit https://www.acunetix.com/ to download and install manually.'"
    ["nexpose"]="echo 'Nexpose is now called Rapid7 InsightVM; please visit https://www.rapid7.com/products/insightvm/ to download and install manually.'"
    ["network security scanner"]="echo 'Network Security Scanner is a broad category; please specify the tool for further instructions.'"
    ["saint security suite"]="echo 'Saint Security Suite is a commercial tool; please visit https://www.saintcorporation.com/ to download and install manually.'"
    ["besecure avds"]="echo 'BeSecure AVDS is a commercial tool; please visit https://www.besecure.in/ to download and install manually.'"
    ["nstacker wass"]="echo 'NStacker WASS is a commercial tool; please visit https://nstacker.com/ to download and install manually.'"
    ["vega"]="apt-get install vega -y"
    ["arachni"]="apt-get install arachni -y"
    ["skipfish"]="apt-get install skipfish -y"
)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Function to execute tools with the provided URL/IP address
execute_tool() {
    local tool=$1
    local address=$2

    # Trap Ctrl+C to handle interruption
    trap 'echo -e "\nInterrupt detected. Skipping $tool."; exit 1;' SIGINT

    case $tool in
        "OpenVAS")
            echo "Please follow the instructions to use OpenVAS manually."
            ;;
        "w3af")
            cd w3af && python w3af.py
            ;;
        "owaspzap")
            zaproxy
            ;;
        "nikto")
            nikto -h "$address"
            ;;
        "burpsuite")
            java -jar burpsuite.jar
            ;;
        "Nessus")
            echo "Please follow the instructions to use Nessus manually."
            ;;
        "qualys")
            echo "Please follow the instructions to use Qualys manually."
            ;;
        "gfi landguard")
            echo "Please follow the instructions to use GFI LandGuard manually."
            ;;
        "acunetix")
            echo "Please follow the instructions to use Acunetix manually."
            ;;
        "nexpose")
            echo "Please follow the instructions to use Nexpose (Rapid7 InsightVM) manually."
            ;;
        "network security scanner")
            echo "Please specify the tool for further instructions."
            ;;
        "saint security suite")
            echo "Please follow the instructions to use Saint Security Suite manually."
            ;;
        "besecure avds")
            echo "Please follow the instructions to use BeSecure AVDS manually."
            ;;
        "nstacker wass")
            echo "Please follow the instructions to use NStacker WASS manually."
            ;;
        "vega")
            vega
            ;;
        "arachni")
            arachni "$address"
            ;;
        "skipfish")
            skipfish -o /output "$address"
            ;;
        *)
            echo "Unknown tool: $tool"
            ;;
    esac
}

# Main script execution
echo "Information Gathering Tools"
echo "List of tools available in this script:"
for tool in "${!tools[@]}"; do
    echo "- $tool"
done

echo ""
echo "Starting tool check and installation process..."

for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."

# Prompt for URL/IP address
read -p "Enter the URL or IP address to scan: " address

# Execute tools with the provided URL/IP address
for tool in "${!tools[@]}"; do
    echo -e "\n=====================================\n"
    echo "Executing $tool with address $address..."
    execute_tool "$tool" "$address"
    echo -e "\n=====================================\n"
done
