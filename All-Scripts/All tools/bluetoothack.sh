#!/bin/bash


# List of tools and their installation methods
declare -A tools
tools=(
    ["bluesmaking"]="git clone https://github.com/bluez/bluesmaking.git && cd bluesmaking && make"
    ["bluejacking"]="git clone https://github.com/someone/bluejacking.git && cd bluejacking && make"
    ["blue-snarfing"]="git clone https://github.com/someone/blue-snarfing.git && cd blue-snarfing && make"
    ["blue-sniff"]="git clone https://github.com/someone/blue-sniff.git && cd blue-sniff && make"
    ["blue-bugging"]="git clone https://github.com/someone/blue-bugging.git && cd blue-bugging && make"
    ["blue-printing"]="git clone https://github.com/someone/blue-printing.git && cd blue-printing && make"
    ["btlejacking"]="git clone https://github.com/someone/btlejacking.git && cd btlejacking && make"
    ["knob-attack"]="git clone https://github.com/someone/knob-attack.git && cd knob-attack && make"
    ["mac-spoofing-attack"]="sudo apt-get install macchanger -y"
)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Function to execute tools
execute_tool() {
    local tool=$1

    # Trap Ctrl+C to handle interruption
    trap 'echo -e "\nInterrupt detected. Skipping $tool."; exit 1;' SIGINT

    case $tool in
        "bluesmaking")
            cd bluesmaking && ./bluesmaking
            ;;
        "bluejacking")
            cd bluejacking && ./bluejacking
            ;;
        "blue-snarfing")
            cd blue-snarfing && ./blue-snarfing
            ;;
        "blue-sniff")
            cd blue-sniff && ./blue-sniff
            ;;
        "blue-bugging")
            cd blue-bugging && ./blue-bugging
            ;;
        "blue-printing")
            cd blue-printing && ./blue-printing
            ;;
        "btlejacking")
            cd btlejacking && ./btlejacking
            ;;
        "knob-attack")
            cd knob-attack && ./knob-attack
            ;;
        "mac-spoofing-attack")
            echo "Please use 'macchanger' command for MAC spoofing."
            ;;
        *)
            echo "Unknown tool: $tool"
            ;;
    esac
}

# Main script execution
echo "Bluetooth and MAC Spoofing Tools"
echo "List of tools available in this script:"
for tool in "${!tools[@]}"; do
    echo "- $tool"
done

echo ""
echo "Starting tool check and installation process..."

for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."

# Execute tools
for tool in "${!tools[@]}"; do
    echo -e "\n=====================================\n"
    echo "Executing $tool..."
    execute_tool "$tool"
    echo -e "\n=====================================\n"
done
