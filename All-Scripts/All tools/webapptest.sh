#!/bin/bash



# List of tools and their installation methods
declare -A tools
tools=(
    ["burpsuite"]="wget https://portswigger-cdn.net/burp/releases/download?product=community&version=2024.6.2&type=jar -O burpsuite.jar"
    ["owasp zap"]="apt-get install zaproxy -y"
    ["w3af"]="git clone https://github.com/andresriancho/w3af.git && cd w3af && pip install -r requirements.txt"
    ["nikto"]="apt-get install nikto -y"
    ["sqlmap"]="apt-get install sqlmap -y"
    ["vega"]="apt-get install vega -y"
    ["wpscan"]="gem install wpscan"
    ["skipfish"]="apt-get install skipfish -y"
    ["webscarab"]="apt-get install webscarab -y"
    ["httrack"]="apt-get install httrack -y"
    ["commix"]="apt-get install commix -y"
    ["corstest"]="git clone https://github.com/airbnb/corstest.git && cd corstest && pip install -r requirements.txt"
    ["corsme"]="git clone https://github.com/s0md3v/CorsMe.git && cd CorsMe && pip install -r requirements.txt"
    ["crlfsuite"]="git clone https://github.com/portcullis/crlfuzz.git && cd crlfuzz && pip install -r requirements.txt"
    ["injectus"]="git clone https://github.com/0xInfection/Injectus.git && cd Injectus && pip install -r requirements.txt"
    ["xsrfprobe"]="git clone https://github.com/sa7mon/xsrfprobe.git && cd xsrfprobe && pip install -r requirements.txt"
    ["dotdotpwn"]="git clone https://github.com/wireghoul/dotdotpwn.git && cd dotdotpwn && chmod +x dotdotpwn.pl"
    ["fuzzdb"]="git clone https://github.com/fuzzdb-project/fuzzdb.git && cd fuzzdb"
    ["fuzzapi"]="git clone https://github.com/fuzzapi/fuzzapi.git && cd fuzzapi && pip install -r requirements.txt"
    ["arachni"]="apt-get install arachni -y"
)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Function to execute tools with the provided URL/IP address
execute_tool() {
    local tool=$1
    local address=$2

    # Trap Ctrl+C to handle interruption
    trap 'echo -e "\nInterrupt detected. Skipping $tool."; exit 1;' SIGINT

    case $tool in
        "burpsuite")
            java -jar burpsuite.jar
            ;;
        "owasp zap")
            zaproxy
            ;;
        "w3af")
            cd w3af && python w3af.py
            ;;
        "nikto")
            nikto -h "$address"
            ;;
        "sqlmap")
            sqlmap -u "$address"
            ;;
        "vega")
            vega
            ;;
        "wpscan")
            wpscan --url "$address"
            ;;
        "skipfish")
            skipfish -o /output "$address"
            ;;
        "webscarab")
            webscarab
            ;;
        "httrack")
            httrack "$address"
            ;;
        "commix")
            commix -u "$address"
            ;;
        "corstest")
            cd corstest && python corstest.py "$address"
            ;;
        "corsme")
            cd CorsMe && python corsme.py "$address"
            ;;
        "crlfsuite")
            cd crlfuzz && python crlfuzz.py "$address"
            ;;
        "injectus")
            cd Injectus && python injectus.py "$address"
            ;;
        "xsrfprobe")
            cd xsrfprobe && python xsrfprobe.py "$address"
            ;;
        "dotdotpwn")
            perl dotdotpwn.pl "$address"
            ;;
        "fuzzdb")
            cd fuzzdb
            ;;
        "fuzzapi")
            cd fuzzapi && python fuzzapi.py "$address"
            ;;
        "arachni")
            arachni "$address"
            ;;
        *)
            echo "Unknown tool: $tool"
            ;;
    esac
}

# Main script execution
echo "Information Gathering Tools"
echo "List of tools available in this script:"
for tool in "${!tools[@]}"; do
    echo "- $tool"
done

echo ""
echo "Starting tool check and installation process..."

for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."

# Prompt for URL/IP address
read -p "Enter the URL or IP address to scan: " address

# Execute tools with the provided URL/IP address
for tool in "${!tools[@]}"; do
    echo -e "\n=====================================\n"
    echo "Executing $tool with address $address..."
    execute_tool "$tool" "$address"
    echo -e "\n=====================================\n"
done
