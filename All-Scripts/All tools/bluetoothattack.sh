#!/bin/bash



# List of tools and their installation methods
declare -A tools
tools=(
    ["Bluetooth-view"]="git clone https://github.com/someone/Bluetooth-view.git && cd Bluetooth-view && make"
    ["bluez"]="sudo apt-get install bluez -y"
    ["bttlejack"]="git clone https://github.com/someone/bttlejack.git && cd bttlejack && make"
    ["BT-crawler"]="git clone https://github.com/someone/BT-crawler.git && cd BT-crawler && make"
    ["bluescan"]="git clone https://github.com/someone/bluescan.git && cd bluescan && make"
)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Function to execute tools
execute_tool() {
    local tool=$1

    # Trap Ctrl+C to handle interruption
    trap 'echo -e "\nInterrupt detected. Skipping $tool."; exit 1;' SIGINT

    case $tool in
        "Bluetooth-view")
            cd Bluetooth-view && ./Bluetooth-view
            ;;
        "bttlejack")
            cd bttlejack && ./bttlejack
            ;;
        "BT-crawler")
            cd BT-crawler && ./BT-crawler
            ;;
        "bluescan")
            cd bluescan && ./bluescan
            ;;
        "bluez")
            echo "bluez is a system service and does not have an executable command to run."
            ;;
        *)
            echo "Unknown tool: $tool"
            ;;
    esac
}

# Main script execution
echo "Bluetooth Tools"
echo "List of tools available in this script:"
for tool in "${!tools[@]}"; do
    echo "- $tool"
done

echo ""
echo "Starting tool check and installation process..."

for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."

# Execute tools
for tool in "${!tools[@]}"; do
    echo -e "\n=====================================\n"
    echo "Executing $tool..."
    execute_tool "$tool"
    echo -e "\n=====================================\n"
done
