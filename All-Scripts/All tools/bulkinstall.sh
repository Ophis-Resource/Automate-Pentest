# List of tools and their installation methods
declare -A tools
tools=(
    # -------------------------------------------------
    # ["nmap"]="apt-get install nmap -y"
    # ["zenmap"]="apt-get install zenmap -y"
    # ["Dmitry"]="apt-get install dmitry -y"
    # ["the harvester"]="apt-get install theharvester -y"
    # ["dnsrecon"]="pip install dnsrecon"
    # ["unicornscan"]="apt-get install unicornscan -y"
    # ["whois"]="apt-get install whois -y"
    # ["icmp traceroute"]="apt-get install traceroute -y"
    # ["tcptraceroute"]="apt-get install tcptraceroute -y"
    # ["traceroute"]="apt-get install traceroute -y"
    # ["dirbuster"]="apt-get install dirbuster -y"
    # ["wpscan"]="apt-get install wpscan -y"
    # ["masscan"]="apt-get install masscan -y"
    # ["amass"]="apt-get install amass -y"
    # ["dnsrecon"]="pip install dnsrecon"
    # ["takeover"]="pip install takeover"
    # ["arachni"]="apt-get install arachni -y"
    # ["sqlninja"]="apt-get install sqlninja -y"
    # ["searchsploit"]="apt-get install exploitdb -y"
    # ["OpenVAS"]="apt-get install openvas -y && gvm-setup"
    # ["owaspzap"]="apt-get install zaproxy -y"
    # ["nikto"]="apt-get install nikto -y"
    # ["network security scanner"]="echo 'Network Security Scanner is a broad category; please specify the tool for further instructions.'"
    # ["vega"]="apt-get install vega -y"
    # ["arachni"]="apt-get install arachni -y"
    # ["skipfish"]="apt-get install skipfish -y"
    # ["owasp zap"]="apt-get install zaproxy -y"
    # ["nikto"]="apt-get install nikto -y"
    # ["sqlmap"]="apt-get install sqlmap -y"
    # ["vega"]="apt-get install vega -y"
    # ["wpscan"]="gem install wpscan"
    # ["skipfish"]="apt-get install skipfish -y"
    # ["webscarab"]="apt-get install webscarab -y"
    # ["httrack"]="apt-get install httrack -y"
    # ["commix"]="apt-get install commix -y"
    # ["arachni"]="apt-get install arachni -y"
    # ["johntheripper"]="apt-get install john -y"
    # ["hashcat"]="apt-get install hashcat -y"
    # ["hydra"]="apt-get install hydra -y"
    # ["rainbowcrack"]="apt-get install rainbowcrack -y"
    # ["crunch"]="apt-get install crunch -y"
    # ["medusa"]="apt-get install medusa -y"
    # ["cewl"]="apt-get install cewl -y"
    # ["ophcrack"]="apt-get install ophcrack -y"
    # ["ncrack"]="apt-get install ncrack -y"
    # ["thc hydra"]="apt-get install hydra -y"
    # ["set"]="apt-get install set -y"
    # ["androguard"]="pip install androguard"
    # ["Frida"]="pip install frida-tools"
    # ["orbot proxy"]="sudo apt-get install tor -y && tor --version"
    # ["arpspoof"]="sudo apt-get install dsniff -y"
    # ["wifite"]="sudo apt-get install wifite -y"
    # ["reaver"]="sudo apt-get install reaver -y"
    # ["kismet"]="sudo apt-get install kismet -y"
    # ["ettercap"]="sudo apt-get install ettercap-text-only -y"
    # ["aircrack-ng"]="sudo apt-get install aircrack-ng -y"
    # ["bluez"]="sudo apt-get install bluez -y"
    # ["autopsy"]="sudo apt-get install autopsy -y"
    # ["hashdeep"]="sudo apt-get install hashdeep -y"
    # ["msf"]="sudo apt-get install metasploit-framework -y"
    # ["Metasploit"]="sudo apt-get install metasploit-framework -y"
    # ["binwalk"]="sudo apt-get install binwalk -y"
    # ["mac-spoofing-attack"]="sudo apt-get install macchanger -y"
    # ["Armitage"]="sudo apt-get install armitage -y"
    # ["searchsploit"]="sudo apt-get install exploitdb -y"
    # ["wireshark"]="sudo apt-get install wireshark -y"
    # ["bettercap"]="sudo apt-get install bettercap -y"
    # ["Ettercap"]="sudo apt-get install ettercap-graphical -y"
    # ["driftnet"]="sudo apt-get install driftnet -y"
    # ["dsniff"]="sudo apt-get install dsniff -y"
    # ["arpspoof"]="sudo apt-get install dsniff -y"  # Included in dsniff package
    # ["hping"]="sudo apt-get install hping3 -y"
    # ["anti ddos guardian"]="sudo apt-get install anti-ddos-guardian -y"  # Replace with actual package or installation method
    # ["owasp zap"]="sudo apt-get install owasp-zap -y"
    # ["burpsuite"]="sudo apt-get install burpsuite -y"  # Might require additional setup
    # ["bettercap"]="sudo apt-get install bettercap -y"
    # ["wireshark"]="sudo apt-get install wireshark -y"
    # ["apktool"]="sudo apt-get install apktool -y"
    # ["nasm shell"]="sudo apt-get install nasm -y"
    # ["pipal"]="sudo apt-get install pipal -y"
    # ["dradis"]="sudo apt-get install dradis -y"
    # ["faraday"]="sudo apt-get install faraday -y"  # Update with the correct repository if not available via apt
    # ["ip"]="sudo apt-get install iproute2 -y"
    # ["ifconfig"]="sudo apt-get install net-tools -y"
    # ["iwconfig"]="sudo apt-get install wireless-tools -y"
    # ["arp"]="sudo apt-get install net-tools -y"
    # ["ping"]="sudo apt-get install iputils-ping -y"
    # ["netstat"]="sudo apt-get install net-tools -y"
    # ["wapiti"]="sudo apt-get install wapiti -y"
    # ["fierce"]="sudo apt-get install fierce -y"
    # ["jok3r"]="sudo apt-get install jok3r -y"
    # ["openscap"]="sudo apt-get install openscap -y"
    # ["scapy"]="sudo apt-get install python3-scapy -y"
    # ["grype"]="sudo apt-get install grype -y"
    # ["cdk"]="sudo apt-get install cdk -y"
    # ["runc"]="sudo apt-get install runc -y"
    # ["dockerfile-linter"]="sudo apt-get install dockerfile-linter -y"
    # ["falco"]="sudo apt-get install falco -y"
    # ["trivy"]="sudo apt-get install trivy -y"
    # ["synk"]="sudo apt-get install synk -y"
    # ["lynis"]="sudo apt-get install lynis -y"
    # ["syft"]="sudo apt-get install syft -y"
    # ["uniscan"]="sudo apt-get install uniscan -y"
    # ["arjun"]="pip install arjun"
    # ["graphinder"]="pip install graphinder"
    # ["devtools"]="pip install devtools"
    # ["cdk"]="npm install -g aws-cdk"
    # ["clair"]="docker pull quay.io/coreos/clair"
    # ["clair-scanner"]="docker pull arminc/clair-scanner"
    # ["ggshield"]="pip install ggshield"
    # ["harpoon"]="pip install harpoon"
    # ["telnet"]="sudo apt install telnet"
    # ["dig"]="sudo apt install dnsutils"
    # ["openssl s_client"]="sudo apt install openssl"
    # ["macof"]="sudo apt install dsniff"
    # ["hping"]="sudo apt install hping3"
    # ["recon-ng"]="pip install recon-ng"
    # ["the harvester"]="pip install theharvester"
    # ["dnsrecon"]="pip install dnsrecon"
    # ["netdiscover"]="sudo apt install netdiscover"
    # ["unicornscan"]="sudo apt install unicornscan"
    # ["masscan"]="sudo apt install masscan"
    # ["p0f"]="sudo apt install p0f"
    # ["whois"]="sudo apt install whois"
    # ["icmp traceroute"]="sudo apt install traceroute"
    # ["tcptraceroute"]="sudo apt install tcptraceroute"
    # ["traceroute"]="sudo apt install traceroute"
    # ["impacket"]="pip install impacket"
    # ["crackmapesc"]="pip install crackmapesc"
    # ["evilwinrm"]="gem install evil-winrm"
    # ["angryip scanner"]="sudo apt install ipscan"
    # ["nagios"]="sudo apt install nagios-nrpe-server"

    # -------------------- added in aptinstallationscript.
    
    
    # ["bluto"]="git clone https://github.com/0xInfection/bluto.git && cd bluto && go build"
    # ["ptf"]="git clone https://github.com/trustedsec/ptf.git && cd ptf && python ptf"
    # ["jsql injection"]="git clone https://github.com/joaomatosf/jsql-injection.git && cd jsql-injection && mvn package"
    # ["exploitpack"]="git clone https://github.com/exploitpack/exploitpack.git && cd exploitpack && python setup.py install"
    # ["beefxss framework"]="git clone https://github.com/beefproject/beef.git && cd beef && bundle install"
    # ["w3af"]="git clone https://github.com/andresriancho/w3af.git && cd w3af && pip install -r requirements.txt"
    # ["sublister"]="git clone https://github.com/aboul3la/Sublist3r.git && cd Sublist3r && pip3 install -r requirements.txt"
    # ["naabu"]="go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest"
    # ["massdns"]="git clone https://github.com/blechschmidt/massdns.git && cd massdns && make"
    # ["subjack"]="go install github.com/haccer/subjack@latest"
    # ["sub0ver"]="git clone https://github.com/subover/subover.git && cd subover && go build"
    # ["corscanner"]="git clone https://github.com/s0md3v/CorsScanner.git && cd CorsScanner && pip install -r requirements.txt"
    # ["cnames"]="git clone https://github.com/Namechk/cnames.git && cd cnames && pip install -r requirements.txt"
    # ["subhijack"]="git clone https://github.com/s0md3v/SubBrute.git && cd SubBrute && pip install -r requirements.txt"
    # ["p0f"]="apt-get install p0f -y"
    # ["netdiscover"]="apt-get install netdiscover -y"
    # ["recon-ng"]="apt-get install recon-ng -y" requires input 
    # ["maltego"]="apt-get install maltego -y"
    # ["stealth scan"]="git clone https://github.com/your-repo/stealth-scan.git && cd stealth-scan && make"
    # ["golismero"]="git clone https://github.com/golismero/golismero.git && cd golismero && pip install -r requirements.txt"
    # ["uniscan"]="git clone https://github.com/ardamavi/uniscan.git && cd uniscan && chmod +x uniscan && sudo cp uniscan /usr/local/bin/"
    # ["ICS exploitation framework"]="git clone https://github.com/username/ics-exploitation-framework.git && cd ics-exploitation-framework && make && sudo make install"
    # ["rfcrack"]="git clone https://github.com/username/rfcrack.git && cd rfcrack && make && sudo make install"
    # ["deepce"]="git clone https://github.com/deepce/deepce.git"
    # ["dockerscout"]="git clone https://github.com/docker/docker-scout.git"
    # ["golismero"]="git clone https://github.com/golismero/golismero.git"
    # ["apiclarity"]="git clone https://github.com/arachnys/apiclarity.git"
    # ["modbus cli"]="git clone https://github.com/username/modbus-cli.git && cd modbus-cli && make && sudo make install"
    # ["anchore-engine"]="git clone https://github.com/anchore/anchore-engine.git"
    # ["dagda"]="git clone https://github.com/avast/dagda.git"
    # ["megaping"]="pip install megaping"
    # ["shodan"]="pip install shodan"
    # ["google dorking"]="pip install googledork"
    # ["waybackmachine"]="pip install waybackmachine"
    # ["osint framework"]="git clone https://github.com/your-repo/osint-framework.git && cd osint-framework && pip install -r requirements.txt"
    # ["megaping"]="git clone https://github.com/cheusov/megaping.git && cd megaping && make"
    # ["bluto"]="git clone https://github.com/obscuritylabs/bluto.git && cd bluto && pip install -r requirements.txt"
    # ["ldapdomaindump"]="git clone https://github.com/dirkjanm/ldapdomaindump.git && cd ldapdomaindump && pip install -r requirements.txt"
    # ["plumhound"]="git clone https://github.com/forensicninja/plumhound.git && cd plumhound && pip install -r requirements.txt"
    # ["goldeneye"]="git clone https://github.com/jseidl/GoldenEye.git && cd GoldenEye && pip install -r requirements.txt"
    # ["gphish"]="git clone https://github.com/gophish/gophish.git && cd gophish && go build"
    # ["secret scanner"]="pip install git+https://github.com/airbnb/semgrep"
    # ["syft"]="curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh"
    # ["sn1per"]="git clone https://github.com/1N3/Sn1per.git && cd Sn1per && ./install.sh"
    # ["ddos ripper"]="git clone https://github.com/yourrepo/ddos-ripper.git && cd ddos-ripper"  # Update with the actual repo URL
    # ["ddos_attack.py"]="git clone https://github.com/yourrepo/ddos-attack.py.git && cd ddos-attack.py"  # Update with the actual repo URL
    # ["goldeneye"]="git clone https://github.com/yourrepo/goldeneye.git && cd goldeneye"  # Update with the actual repo URL
    # ["hoic"]="git clone https://github.com/yourrepo/hoic.git && cd hoic"  # Update with the actual repo URL
    # ["loic"]="git clone https://github.com/yourrepo/loic.git && cd loic"  # Update with the actual repo URL
    # ["xioc"]="git clone https://github.com/yourrepo/xioc.git && cd xioc"  # Update with the actual repo URL
    # ["hulk"]="git clone https://github.com/yourrepo/hulk.git && cd hulk"  # Update with the actual repo URL
    # ["tor's hammer"]="git clone https://github.com/yourrepo/tor-hammer.git && cd tor-hammer"  # Update with the actual repo URL
    # ["soloris"]="git clone https://github.com/yourrepo/soloris.git && cd soloris"  # Update with the actual repo URL
    # ["slowloris"]="git clone https://github.com/yourrepo/slowloris.git && cd slowloris"  # Update with the actual repo URL
    # ["pyloris"]="git clone https://github.com/yourrepo/pyloris.git && cd pyloris"  # Update with the actual repo URL
    # ["r u dead yet rudy"]="git clone https://github.com/yourrepo/rudy.git && cd rudy"  # Update with the actual repo URL
    # ["dockerlint"]="git clone https://github.com/alternante/dockerlint.git"
    # ["clair"]="git clone https://github.com/quay/clair.git"
    # ["amicontained"]="git clone https://github.com/amicontained/amicontained.git"
    # ["dockscan"]="git clone https://github.com/simonbates/dockscan.git"
    # ["mobsf"]="git clone https://github.com/MobileSecurityTesting/mobile-security-framework-mstg.git && cd mobile-security-framework-mstg && pip install -r requirements.txt"
    # ["patador"]="git clone https://github.com/pyupio/patador.git && cd patador && python3 setup.py install"
    # ["w3af"]="git clone https://github.com/andresriancho/w3af.git && cd w3af && pip install -r requirements.txt"
    # ["corstest"]="git clone https://github.com/airbnb/corstest.git && cd corstest && pip install -r requirements.txt"
    # ["corsme"]="git clone https://github.com/s0md3v/CorsMe.git && cd CorsMe && pip install -r requirements.txt"
    # ["crlfsuite"]="git clone https://github.com/portcullis/crlfuzz.git && cd crlfuzz && pip install -r requirements.txt"
    # ["injectus"]="git clone https://github.com/0xInfection/Injectus.git && cd Injectus && pip install -r requirements.txt"
    # ["xsrfprobe"]="git clone https://github.com/sa7mon/xsrfprobe.git && cd xsrfprobe && pip install -r requirements.txt"
    # ["dotdotpwn"]="git clone https://github.com/wireghoul/dotdotpwn.git && cd dotdotpwn && chmod +x dotdotpwn.pl"
    # ["fuzzdb"]="git clone https://github.com/fuzzdb-project/fuzzdb.git && cd fuzzdb"
    # ["fuzzapi"]="git clone https://github.com/fuzzapi/fuzzapi.git && cd fuzzapi && pip install -r requirements.txt"
    # ["kingphisher"]="git clone https://github.com/securestate/king-phisher.git && cd king-phisher && python3 setup.py install"
    # ["phishx"]="git clone https://github.com/s0md3v/PhishX.git && cd PhishX && pip install -r requirements.txt"
    # ["shellphish"]="git clone https://github.com/shellphish/shellphish.git && cd shellphish && pip install -r requirements.txt"
    # ["blackeye"]="git clone https://github.com/An0nUD4Y/BlackEye.git && cd BlackEye && chmod +x blackeye.sh"
    # ["trape"]="git clone https://github.com/jofpin/trape.git && cd trape && pip install -r requirements.txt"
    # ["evilginx"]="git clone https://github.com/evilginx/evilginx2.git && cd evilginx2 && ./install.sh"
    # ["speedphish framework"]="git clone https://github.com/avavion/speedphish.git && cd speedphish && python3 setup.py install"
    # ["msi single phish"]="git clone https://github.com/msfvenom/msi-single-phish.git && cd msi-single-phish && pip install -r requirements.txt"["drozer"]="pip install drozer"
    # ["network spoofer"]="git clone https://github.com/claudiotnet/network-spoofer.git && cd network-spoofer && pip install -r requirements.txt"
    # ["loic"]="git clone https://github.com/NewEraCracker/LOIC.git && cd LOIC && ./LOIC"
    # ["droidsheep"]="git clone https://github.com/droidsheep/droidsheep.git && cd droidsheep && pip install -r requirements.txt"
    # ["Bluetooth-view"]="git clone https://github.com/someone/Bluetooth-view.git && cd Bluetooth-view && make"
    # ["bluesmaking"]="git clone https://github.com/bluez/bluesmaking.git && cd bluesmaking && make"
    # ["pixiewps"]="git clone https://github.com/wi-fi-analyzer/pixiewps.git && cd pixiewps && make"
    # ["phonesploit"]="git clone https://github.com/WasatchHacks/phonesploit.git && cd phonesploit && python3 setup.py install"
    # ["fern wifi cracker"]="git clone https://github.com/szpak/fern-wifi-cracker.git && cd fern-wifi-cracker && sudo python3 setup.py install"
    # ["ghostphisher"]="git clone https://github.com/swisskyrepo/ghost-phisher.git && cd ghost-phisher && sudo python3 ghost-phisher.py"
    # ["wifiphisher"]="git clone https://github.com/wifiphisher/wifiphisher.git && cd wifiphisher && sudo python3 setup.py install"
    # ["bluejacking"]="git clone https://github.com/someone/bluejacking.git && cd bluejacking && make"
    # ["blue-snarfing"]="git clone https://github.com/someone/blue-snarfing.git && cd blue-snarfing && make"
    # ["blue-sniff"]="git clone https://github.com/someone/blue-sniff.git && cd blue-sniff && make"
    # ["blue-bugging"]="git clone https://github.com/someone/blue-bugging.git && cd blue-bugging && make"
    # ["blue-printing"]="git clone https://github.com/someone/blue-printing.git && cd blue-printing && make"
    # ["btlejacking"]="git clone https://github.com/someone/btlejacking.git && cd btlejacking && make"
    # ["knob-attack"]="git clone https://github.com/someone/knob-attack.git && cd knob-attack && make"
    # ["bttlejack"]="git clone https://github.com/someone/bttlejack.git && cd bttlejack && make"
    # ["BT-crawler"]="git clone https://github.com/someone/BT-crawler.git && cd BT-crawler && make"
    # ["bluescan"]="git clone https://github.com/someone/bluescan.git && cd bluescan && make"
    # ["galleta"]="git clone https://github.com/someone/galleta.git && cd galleta && python setup.py install"
    # ["volafox"]="git clone https://github.com/someone/volafox.git && cd volafox && python setup.py install"
    # ["volatility"]="git clone https://github.com/volatilityfoundation/volatility.git && cd volatility && python setup.py install"
    # ["empire"]="git clone https://github.com/EmpireProject/Empire.git && cd Empire && ./setup/install.sh"
    # ["pupy"]="git clone https://github.com/n1nj4sec/pupy.git && cd pupy && python pupy.py"
    # ["koadic"]="git clone https://github.com/zerosum0x0/koadic.git && cd koadic && python koadic.py"
    # ["dnscat2"]="git clone https://github.com/iagox86/dnscat2.git && cd dnscat2 && gem install bundler && bundle install"
    # ["bloodhound"]="git clone https://github.com/BloodHoundAD/BloodHound.git && cd BloodHound && npm install"
    # ["veil-pillage framework"]="git clone https://github.com/Veil-Framework/Veil.git && cd Veil && ./setup.sh"
    # ["powersploit"]="git clone https://github.com/PowerShellEmpire/PowerSploit.git && cd PowerSploit"
    # ["powershell empire"]="git clone https://github.com/EmpireProject/Empire.git && cd Empire && ./setup/install.sh"
    # ["sqlninja"]="git clone https://github.com/sqlninja/sqlninja.git && cd sqlninja && make"
    # ["sqlmap"]="git clone https://github.com/sqlmapproject/sqlmap.git && cd sqlmap"
    # ["ptf"]="git clone https://github.com/trustedsec/ptf.git && cd ptf && python ptf.py"
    # ["jsql injection"]="git clone https://github.com/ron1990/jsql-injection.git && cd jsql-injection && ./jsql-injection.sh"
    # ["exploitpack"]="git clone https://github.com/exploitpack/exploitpack.git && cd exploitpack"
    # ["crackstation"]="git clone https://github.com/crackdome/crackstation.git"
    # ["legion"]="git clone https://github.com/GoVanguard/Legion.git"
    # ["evolvept"]="git clone https://github.com/2ndFaze/EvolvePT.git"
    # ["mitmf"]="git clone https://github.com/byt3bl33d3r/mitmf.git && cd mitmf"
    # ["responder"]="git clone https://github.com/ spiderlabs/responder.git && cd responder"
    # ["beefxss framework"]="git clone https://github.com/beefproject/beef.git && cd beef && ./beef"
    # ["exploitpack"]="git clone https://github.com/exploitpack/exploitpack.git && cd exploitpack"
    # ["hamster"]="git clone https://github.com/antirez/hamster.git && cd hamster && make"
    # ["netool toolkit"]="git clone https://github.com/robertdavidgraham/netool.git && cd netool"
    # ["sslstrip"]="git clone https://github.com/moxie0/sslstrip.git && cd sslstrip"
    # ["arpoison"]="git clone https://github.com/robertdavidgraham/arpoison.git && cd arpoison"
    # ["websploit framework"]="git clone https://github.com/websploit/websploit.git && cd websploit && sudo python3 setup.py install"  # Update with the actual repo URL
    # ["sslstrip"]="git clone https://github.com/moxie0/sslstrip.git && cd sslstrip && sudo python3 setup.py install"  # Update with the actual repo URL
    # ["flashm"]="git clone https://github.com/flashm/flashm.git && cd flashm && sudo make install"  # Update with the actual repo URL and build instructions
    # ["serpico"]="git clone https://github.com/SerpicoProject/serpico.git && cd serpico && pip3 install -r requirements.txt"  # Assumes Python dependencies
    # ["magictree"]="git clone https://github.com/ivandavidov/magictree.git && cd magictree && pip3 install -r requirements.txt"  # Assumes Python dependencies
    # ["unnicornscan"]="git clone https://github.com/Unicornscan/Unicornscan.git"
    # ["docker-bench-security"]="git clone https://github.com/docker/docker-bench-security.git"


    # ["manageengine"]="wget https://www.manageengine.com/downloads/manageengine.zip -O manageengine.zip && unzip manageengine.zip"
    # ["nexpose"]="wget https://downloads.rapid7.com/nexpose/latest/nexpose-linux-x64-7.0.50-ubuntu.deb -O nexpose.deb && sudo dpkg -i nexpose.deb && sudo apt-get install -f -y"
    # ["burpsuite"]="wget https://portswigger-cdn.net/burp/releases/download?product=community&version=2024.6.2&type=jar -O burpsuite.jar"
    # ["vega"]="wget https://github.com/subgraph/Vega/releases/download/v1.0.4/vega-linux-x64-1.0.4.tar.gz -O vega.tar.gz && tar -xvf vega.tar.gz && sudo mv vega /opt/ && sudo ln -s /opt/vega/vega /usr/local/bin/vega"
    # ["arachni"]="wget https://github.com/Arachni/arachni/releases/download/1.5.1/arachni-1.5.1-0.5.12-linux-x86_64.tar.gz -O arachni.tar.gz && tar -xvf arachni.tar.gz && sudo mv arachni-1.5.1 /opt/arachni && sudo ln -s /opt/arachni/bin/arachni /usr/local/bin/arachni"
    # ["skipfish"]="wget https://github.com/spinkham/skipfish/releases/download/2.11b/skipfish-2.11b.tgz -O skipfish.tgz && tar -xvf skipfish.tgz && sudo mv skipfish-2.11b /opt/skipfish && sudo ln -s /opt/skipfish/skipfish /usr/local/bin/skipfish"
    # ["dockle"]="wget https://github.com/goodwithtech/dockle/releases/download/v0.3.0/dockle-linux-amd64-0.3.0.tar.gz && tar -xvf dockle-linux-amd64-0.3.0.tar.gz && mv dockle /usr/local/bin/"
    # ["findomain"]="wget https://github.com/Findomain/Findomain/releases/latest/download/findomain-linux && chmod +x findomain-linux && mv findomain-linux /usr/local/bin/findomain"
    # ["hadolint"]="wget https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64 -O /usr/local/bin/hadolint && chmod +x /usr/local/bin/hadolint"
    # ["zanti"]="wget https://github.com/Samsung/zanti/releases/download/v2.7/zanti_v2.7.apk -O zanti.apk && adb install zanti.apk"
    # ["burpsuite"]="wget https://portswigger-cdn.net/burp/releases/download?product=community&version=2024.6.2&type=jar -O burpsuite.jar"
    # ["L0phtcrack"]="wget https://www.l0phtcrack.com/download/L0phtCrack_7.0.10_Install_x64.exe -O L0phtcrack_7.0.10_Install_x64.exe && wine L0phtcrack_7.0.10_Install_x64.exe"
    # ["gophish"]="wget https://github.com/gophish/gophish/releases/download/v0.12.1/gophish-v0.12.1-linux-64bit.zip -O gophish.zip && unzip gophish.zip && cd gophish-v0.12.1 && ./gophish"
    # ["modlishka"]="wget https://github.com/drk1wi/Modlishka/releases/download/1.0/modlishka-linux-amd64 -O modlishka && chmod +x modlishka"
    # ["lucy"]="wget https://github.com/ustayready/lucy/releases/download/v1.2/lucy-v1.2-linux-x86_64.tar.gz -O lucy.tar.gz && tar -xvf lucy.tar.gz && cd lucy && ./lucy"
    # ["mimikatz"]="wget https://github.com/gentilkiwi/mimikatz/releases/download/2.2.0-20210322/mimikatz_trunk.zip && unzip mimikatz_trunk.zip && cd mimikatz"
    
    # ["saint security suite"]="echo 'Saint Security Suite is a commercial tool; please visit https://www.saintcorporation.com/ to download and install manually.'"
    # ["besecure avds"]="echo 'BeSecure AVDS is a commercial tool; please visit https://www.besecure.in/ to download and install manually.'"
    # ["Nessus"]="echo 'Please download Nessus from https://www.tenable.com/downloads/nessus and follow installation instructions manually.'"
    # ["qualys"]="echo 'Qualys is a commercial tool; please visit https://www.qualys.com/ to download and install manually.'"
    # ["gfi landguard"]="echo 'GFI LandGuard is a commercial tool; please visit https://www.gfi.com/products-and-solutions/network-security-solutions/gfi-landguard/ to download and install manually.'"
    # ["acunetix"]="echo 'Acunetix is a commercial tool; please visit https://www.acunetix.com/ to download and install manually.'"
    # ["nexpose"]="echo 'Nexpose is now called Rapid7 InsightVM; please visit https://www.rapid7.com/products/insightvm/ to download and install manually.'"
    # ["nstacker wass"]="echo 'NStacker WASS is a commercial tool; please visit https://nstacker.com/ to download and install manually.'"
    # ["firmanalyzer"]="echo 'Manual installation required: Visit https://www.firmalyzer.com/ for instructions.'"
    # ["riot vulnerability scanner"]="echo 'Manual installation required: Visit https://riot-scanner.com/ for instructions.'"
    # ["foren6"]="echo 'Manual installation required: Visit https://foren6.org/ for instructions.'"
    # ["iot inspector"]="echo 'Manual installation required: Visit https://www.iotinspector.com/ for instructions.'"
    # ["hackRFone"]="echo 'Manual installation required: Visit https://greatscottgadgets.com/hackrf/ for instructions.'"
    # ["seacat.io"]="echo 'Manual installation required: Visit https://seacat.io/ for instructions.'"
    # ["DigiCert iot device manager"]="echo 'Manual installation required: Visit https://www.digicert.com/ for instructions.'"
    # ["fortinac"]="echo 'Manual installation required: Visit https://www.fortinet.com/ for instructions.'"
    # ["darktrace"]="echo 'Manual installation required: Visit https://www.darktrace.com/ for instructions.'"
    # ["symantic critical system protection"]="echo 'Manual installation required: Visit https://www.broadcom.com/ for instructions.'"
    # ["cisco iot threat defence"]="echo 'Manual installation required: Visit https://www.cisco.com/ for instructions.'"
    # ["scada shutdown tool"]="echo 'Manual installation required: Visit https://www.scada-tools.com/ for instructions.'"
    # ["grassmarlin"]="echo 'Manual installation required: Visit https://www.grassmarlin.com/ for instructions.'"
    # ["plcinject"]="echo 'Manual installation required: Visit https://www.plcinject.com/ for instructions.'"
    # ["flowmon"]="echo 'Manual installation required: Visit https://www.flowmon.com/ for instructions.'"
    # ["teneble.ot"]="echo 'Manual installation required: Visit https://www.tenable.com/ for instructions.'"
    # ["forescout"]="echo 'Manual installation required: Visit https://www.forescout.com/ for instructions.'"
    # ["pa 220r"]="echo 'Manual installation required: Visit https://www.paloaltonetworks.com/ for instructions.'"
    # ["Fortinet ics/scada solution"]="echo 'Manual installation required: Visit https://www.fortinet.com/ for instructions.'"
    # ["Nozomi networks guardian"]="echo 'Manual installation required: Visit https://www.nozominetworks.com/ for instructions.'"
    # ["apiclarity"]="echo 'Manual installation required: Visit https://apiclarity.org/ for instructions.'"
    # ["astra"]="echo 'Manual installation required: Visit https://www.astrea.io/ for instructions.'"
    # ["pingcastle"]="echo 'Manual installation required: Visit https://www.pingcastle.com/ for instructions.'"
    # ["advanced ip scanner"]="echo 'Manual installation required: Visit https://www.advanced-ip-scanner.com/ for instructions.'"
    # ["cuckoo sandbox"]="echo 'Manual installation required: Visit https://cuckoosandbox.org/ for instructions.'"
    # ["log analysis using splunk"]="echo 'Manual installation required: Visit https://www.splunk.com/ for instructions.'"
    # ["haveibeenpwned"]="echo 'Manual installation required: Visit https://haveibeenpwned.com/ for instructions.'"
    # ["weleakinfo"]="echo 'Manual installation required: Visit https://weleakinfo.com/ for instructions.'"

    # ["web data extractor"]="echo 'Manual installation required: Visit https://github.com/webdataextractor/webdataextractor for instructions.'"
    # ["vulnapi"]="echo 'Manual installation required: Visit https://github.com/fortra/vulnapi for instructions.'"
    # ["openapi fuzzer"]="echo 'Manual installation required: Visit https://github.com/OAI/OpenAPI-Specification for instructions.'"
    # ["kiterunner"]="echo 'Manual installation required: Visit https://github.com/portcullislabs/kiterunner for instructions.'"
    # ["dagda"]="echo 'Manual installation required: Visit https://github.com/VMware/dagda for instructions.'"
    # ["dockscan"]="echo 'Manual installation required: Visit https://github.com/bozhu/dockscan for instructions.'"
    # ["osint"]="echo 'Manual installation required: Visit https://github.com/osint/osint for instructions.'"
    # ["proxmax"]="echo 'Manual installation required: Visit https://github.com/proxmax/proxmax for instructions.'"
    # ["network spoofer"]="echo 'Manual installation required: Visit https://github.com/network-spoofer/network-spoofer for instructions.'"
    # ["dripper.py"]="echo 'Manual installation required: Visit https://github.com/dripper/dripper.py for instructions.'"
    # ["ddos attack.py"]="echo 'Manual installation required: Visit https://github.com/ddos/ddos-attack.py for instructions.'"
    # ["google fu"]="echo 'Manual installation required: Visit https://github.com/google/google-fu for instructions.'"
    # ["apisec postman"]="echo 'Manual installation required: Visit https://github.com/apisec/postman for instructions.'"
    # ["owasp amass"]="echo 'Manual installation required: Visit https://github.com/OWASP/Amass for instructions.'"
    # ["certify"]="echo 'Manual installation required: Visit https://github.com/certify/certify for instructions.'"
    # ["powerview"]="echo 'Manual installation required: Visit https://github.com/PowerShellEmpire/PowerTools for instructions.'"
    # ["sharphound"]="echo 'Manual installation required: Visit https://github.com/BloodHoundAD/SharpHound for instructions.'"
    # ["purpleknight"]="echo 'Manual installation required: Visit https://github.com/forensicninja/purpleknight for instructions.'"
    # ["juniper"]="echo 'Manual installation required: Visit https://github.com/juniper/juniper for instructions.'"
    # ["mimikatz"]="echo 'Manual installation required: Visit https://github.com/gentilkiwi/mimikatz for instructions.'"
    # ["Rubeus"]="echo 'Manual installation required: Visit https://github.com/Rubeus/Rubeus for instructions.'"
    # ["kerbute"]="echo 'Manual installation required: Visit https://github.com/forensicninja/kerbute for instructions.'"
    # ["bloodhound"]="echo 'Manual installation required: Visit https://github.com/BloodHoundAD/BloodHound for instructions.'"
    # ["responder/pretender"]="echo 'Manual installation required: Visit https://github.com/Responder/Responder for instructions.'"
    # ["certipi"]="echo 'Manual installation required: Visit https://github.com/forensicninja/certipi for instructions.'"
    # ["pkinittools"]="echo 'Manual installation required: Visit https://github.com/forensicninja/pkinittools for instructions.'"
    # ["ddos ripper"]="echo 'Manual installation required: Visit https://github.com/ddos-ripper/ddos-ripper for instructions.'"
    # ["ddos_attack.py"]="echo 'Manual installation required: Visit https://github.com/utsuboco/ddos_attack.py for instructions.'"
    # ["dos"]="echo 'Manual installation required: Visit https://github.com/dos/dos for instructions.'"
    # ["flushdns"]="echo 'Manual installation required: Visit https://github.com/flushdns/flushdns for instructions.'"
    # ["threat mapper"]="echo 'Manual installation required: Visit https://github.com/ThreatMapper/threatmapper for instructions.'"
    # ["amicontained"]="echo 'Manual installation required: Visit https://github.com/amicontained/amicontained for instructions.'"
    # ["botb"]="echo 'Manual installation required: Visit https://github.com/botb for instructions.'"
    # ["iwtools"]="echo 'Manual installation required: Visit https://github.com/iwtools/iwtools for instructions.'"
    # ["runc"]="echo 'Manual installation required: Visit https://github.com/opencontainers/runc for instructions.'"
    
    
    # ["usm anywhere"]="Visit USM Anywhere website for installation instructions"  # Usually a commercial solution, check official website
    # ["imperva ddos protection"]="Visit Imperva website for installation instructions"  # Usually a commercial solution, check official website
    # ["ddos arrests ddos protection service"]="Visit DDOS Arrest website for installation instructions"  # Usually a commercial solution, check official website
    # ["ddos guard"]="Visit DDoS Guard website for installation instructions"  # Usually a commercial solution, check official website
    # ["cloudflare"]="Visit Cloudflare website for installation instructions"  # Usually a commercial solution, check official website
    # ["f5"]="Visit F5 website for installation instructions"  # Usually a commercial solution, check official website
    # ["checkpoint ips"]="Visit Checkpoint website for installation instructions"  # Usually a commercial solution, check official website
    # ["logrythm"]="Visit LogRhythm website for installation instructions"  # Usually a commercial solution, check official website
    # ["SolarWinds"]="Visit SolarWinds website for installation instructions"  # Usually a commercial solution, check official website
    # ["IBM security network IPS"]="Visit IBM website for installation instructions"  # Usually a commercial solution, check official website
    # ["ollydbg"]="Visit the OllyDbg website for installation instructions"  # Usually a Windows tool, check official website
    



)

# Function to check and install tools
check_and_install() {
    local tool=$1
    local install_command=$2
    
    # Check if the tool is installed
    if ! command -v "$tool" &> /dev/null; then
        echo "$tool is not installed."
        read -p "Do you want to install $tool? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            echo "Installing $tool..."
            eval "$install_command"
            echo "$tool installed successfully."
        else
            echo "$tool installation skipped."
        fi
    else
        echo "$tool is already installed."
    fi
}

# Main script execution
echo "Starting tool check and installation process..."

for tool in "${!tools[@]}"; do
    install_command="${tools[$tool]}"
    check_and_install "$tool" "$install_command"
done

echo "Tool installation process completed."
