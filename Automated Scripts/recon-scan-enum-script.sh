# note tp orint
print_star_box2() {
    local content=("$@")
    local max_length=0

    # Find the maximum content length
    for line in "${content[@]}"; do
        if (( ${#line} > max_length )); then
            max_length=${#line}
        fi
    done

    local box_width=$((max_length + 4))

    # Print the top border
    for ((i = 0; i < box_width; i++)); do
        echo -n "*"
    done
    echo

    # Print the content lines
    for line in "${content[@]}"; do
        printf "* %-${max_length}s *\n" "$line"
    done

    # Print the bottom border
    for ((i = 0; i < box_width; i++)); do
        echo -n "*"
    done
    echo
}


knowledge=(
'These are some useful kali tools repos alligned in such a way that it will perform the process of reconnaissance and scanning and enumeration in one script'
'!!! This tool requires manual input sometimes so dont leave the device, stay close !!!'
'This script is just helping you to run multiple tools simultaneously.'
'!! HAPPY HACKING !!'
)

# Print the star box with links
print_star_box2 "${knowledge[@]}"
#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 <IP-address-or-URL>"
    exit 1
}

# Function to handle interruptions
stop_current() {
    echo -e "\nSkipping current tool and proceeding to the next."
    # Continue to the next command
    return
}

# Set trap for interruptions
trap stop_current INT

# Check if an argument is provided
if [ $# -ne 1 ]; then
    usage
fi

TARGET=$1

# Validate input
if ! [[ "$TARGET" =~ ^[a-zA-Z0-9._-]+$ || "$TARGET" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Invalid target. Please provide a valid IP address or URL."
    exit 1
fi

# Adding HTTP/HTTPS protocol to the target if not provided
if ! [[ "$TARGET" =~ ^http:// || "$TARGET" =~ ^https:// ]]; then
    HTTP_TARGET="http://$TARGET"
    HTTPS_TARGET="https://$TARGET"
else
    HTTP_TARGET="$TARGET"
    HTTPS_TARGET="$TARGET"
fi

print_separator() {
    echo "======================================================================================"
    echo "Timestamp: $(date +'%Y-%m-%d %H:%M:%S')"
    echo "======================================================================================"
}
print_separator2() {
    echo "======================================================================================"
}

# Initialize log file
LOGFILE="script_output.log"
> "$LOGFILE"

# Function to run a command and handle errors
run_command() {
    local command=$1
    local description=$2
    echo -e "\nRunning $description:"
    echo "$command"
    eval "$command" 2>&1 | tee -a "$LOGFILE"
}

print_separator

# Whois - works perfect / can uncomment
run_command "whois $TARGET" "Whois scan"
print_separator2;

# # Ping scans - works perfect / can uncomment
echo -e "\nRunning Ping scans:"
print_separator2;
run_command "ping -c 5 $TARGET" "Ping scan"
print_separator

# Nslookup scans - works perfect / can uncomment
echo -e "\nRunning Nslookup scans:"
print_separator2;
run_command "nslookup $TARGET" "Nslookup scan"
print_separator2;
run_command "nslookup -type=A $TARGET" "Nslookup A record"
print_separator2;
run_command "nslookup -query=MX $TARGET" "Nslookup MX record"
print_separator2;
run_command "nslookup -server=8.8.8.8 $TARGET" "Nslookup using Google DNS"
print_separator2;
run_command "nslookup -timeout=5 $TARGET" "Nslookup with timeout"
print_separator2;
run_command "nslookup -recurse $TARGET" "Nslookup recursive"
print_separator2;run_command "nslookup -debug $TARGET" "Nslookup debug"
run_command "nslookup -class=IN $TARGET" "Nslookup class IN"
print_separator

# Traceroute scans - works fine
echo -e "\nRunning Traceroute scans:"
print_separator2;
run_command "tcptraceroute $TARGET" "Traceroute UDP"
print_separator2;
run_command "traceroute $TARGET" "Traceroute TCP"
print_separator

Whatweb scans works fine
echo -e "\nRunning Whatweb scans for both HTTP and HTTPS:"
print_separator2;
run_command "whatweb $HTTP_TARGET" "Whatweb HTTP scan"
print_separator2;
run_command "whatweb $HTTPS_TARGET" "Whatweb HTTPS scan"
print_separator2;
run_command "whatweb -v $HTTP_TARGET" "Whatweb verbose HTTP scan"
print_separator2;
run_command "whatweb -v $HTTPS_TARGET" "Whatweb verbose HTTPS scan"
print_separator2;
run_command "whatweb -t 10 $HTTP_TARGET" "Whatweb HTTP timeout"
print_separator2;
run_command "whatweb -t 10 $HTTPS_TARGET" "Whatweb HTTPS timeout"
print_separator2;
run_command "whatweb -p 'title,server' $HTTP_TARGET" "Whatweb HTTP title and server"
print_separator2;
run_command "whatweb -p 'title,server' $HTTPS_TARGET" "Whatweb HTTPS title and server"
print_separator

# DNS Enumeration with dig works perfect
run_command "dig $TARGET" "dig: Query all records for $TARGET"
print_separator2;
run_command "dig $TARGET A" "dig: Query A record for $TARGET"
print_separator2;
run_command "dig $TARGET AAAA" "dig: Query AAAA record for $TARGET"
print_separator2;
run_command "dig $TARGET MX" "dig: Query MX record for $TARGET"
print_separator2;
run_command "dig $TARGET NS" "dig: Query NS record for $TARGET"
print_separator2;
run_command "dig $TARGET TXT" "dig: Query TXT record for $TARGET"
print_separator2;
run_command "dig $TARGET CNAME" "dig: Query CNAME record for $TARGET"
print_separator2;
run_command "dig $TARGET PTR" "dig: Query PTR record for $TARGET"
print_separator2;
run_command "dig $TARGET SOA" "dig: Query SOA record for $TARGET"
print_separator2;
run_command "dig $TARGET +short" "dig: Short output format for $TARGET"
print_separator2;
run_command "dig $TARGET +trace" "dig: Trace path of the query for $TARGET"
print_separator2;
run_command "dig -x $TARGET" "dig: Reverse DNS lookup for $TARGET"
print_separator2;
run_command "dig $TARGET +dnssec" "dig: Query with DNSSEC for $TARGET"
print_separator2;
run_command "dig $TARGET +multiline" "dig: Multiline output format for $TARGET"
print_separator

# DNS Enumeration with dnsenum works fine
run_command "dnsenum $TARGET" "dnsenum: Basic enumeration for $TARGET"
print_separator2;
run_command "dnsenum -r $TARGET" "dnsenum: Reverse lookup of IP addresses for $TARGET"
print_separator2;
run_command "dnsenum --no-reverse $TARGET" "dnsenum: Disable reverse DNS lookup for $TARGET"
print_separator2;
run_command "dnsenum --subdomains $TARGET" "dnsenum: Discover subdomains for $TARGET"
print_separator


# --------------------------do not uncomment openssl
# # # SSL/TLS with openssl to test
# run_command "openssl s_client -connect $TARGET:21" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET:22" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET:80" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET:443" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:25" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:53" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:8000" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:8001" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:8002" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:8081" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:5000" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:6000" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET:3000" "openssl: Check SSL/TLS handshake with $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET -showcerts" "openssl: Test SSL/TLS certificate for $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET -tls1_2" "openssl: Connect using TLS 1.2 for $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET -tls1_3" "openssl: Connect using TLS 1.3 for $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET -cipher $CIPHER" "openssl: Specify cipher for $TARGET"
# print_separator2;
# #run_command "openssl s_client -connect $TARGET -debug" "openssl: Debug SSL/TLS handshake for $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET -CAfile $CAFILE" "openssl: Verify certificate using CA file for $TARGET"
# print_separator2;
# run_command "openssl s_client -connect $TARGET -cert $CLIENT_CERT -key $CLIENT_KEY" "openssl: Use client certificate for $TARGET"
# print_separator
# -------------------------------------------------------

# -------------------------------------------------------
# SSL/TLS Vulnerabilities with sslscan keep all
# run_command "sslscan $TARGET:$PORT" "sslscan: Scan for SSL/TLS vulnerabilities for $TARGET"
# run_command "sslscan --no-sslv2 --no-sslv3 $TARGET:$PORT" "sslscan: Scan SSL/TLS without SSLv2 and SSLv3 for $TARGET"
# print_separator2;
# run_command "sslscan --tls1 $TARGET:$PORT" "sslscan: Check TLS 1.0 support for $TARGET"
# print_separator2;
# run_command "sslscan --tls1_1 $TARGET:$PORT" "sslscan: Check TLS 1.1 support for $TARGET"
# print_separator2;
# run_command "sslscan --tls1_2 $TARGET:$PORT" "sslscan: Check TLS 1.2 support for $TARGET"
# print_separator2;
# run_command "sslscan --tls1_3 $TARGET:$PORT" "sslscan: Check TLS 1.3 support for $TARGET"
# print_separator2;
# run_command "sslscan --file $FILE $TARGET:$PORT" "sslscan: Scan hosts listed in file for $TARGET"
# print_separator2;
# run_command "sslscan $TARGET:$PORT -o $OUTPUT_FILE" "sslscan: Output results to file for $TARGET"
# print_separator2;
# run_command "sslscan --no-failed $TARGET:$PORT" "sslscan: Show supported ciphers and protocols for $TARGET"
# print_separator
# -------------------------------------------------------


# # Directory and File Scanning with dirb to set it
# run_command "dirb $URL" "dirb: Scan URL"
# print_separator2;
# run_command "dirb $URL $WORDLIST" "dirb: Scan URL with wordlist"
# print_separator2;
# run_command "dirb $URL -x $EXTENSIONS" "dirb: Scan URL with extensions"
# print_separator2;
# run_command "dirb $URL -r" "dirb: Recursive search for $URL"
# print_separator2;
# run_command "dirb $URL -s" "dirb: Silent mode for $URL"
# print_separator2;
# run_command "dirb $URL -o $OUTPUT_FILE" "dirb: Output to file for $URL"
# print_separator2;
# run_command "dirb $URL -t $TIMEOUT" "dirb: Set custom timeout for $URL"
# print_separator2;
# run_command "dirb $URL -l" "dirb: Follow redirects for $URL"
# print_separator2;
# run_command "dirb $URL -w $WORDLIST" "dirb: Use specific wordlist for $URL"
# print_separator2;
# run_command "dirb $URL -u $USER_AGENT" "dirb: Set custom user-agent for $URL"
# print_separator2;
# run_command "dirb $URL -f" "dirb: Force verbose output for $URL"
# print_separator2;
# run_command "dirb $URL -p $PROXY" "dirb: Use specific proxy for $URL"
# print_separator

# # Web Directory Scanning with dirsearch all of them works
# echo "Starting Web Directory Scan with dirsearch"
# print_separator2;
# run_command "dirsearch -u http://$TARGET" "dirsearch basic"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -x .php,.html" "dirsearch with extensions"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -r" "dirsearch recursive"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -e .php,.html" "dirsearch specific extensions"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -t 10" "dirsearch threads"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -o output.txt" "dirsearch output to file"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -s" "dirsearch silent mode"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -p proxy" "dirsearch with proxy"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -f" "dirsearch follow redirects"
# print_separator2;
# run_command "dirsearch -u http://$TARGET -v" "dirsearch verbose output"
# print_separator2;
# run_command "dirsearch -u http://$TARGET --user-agent 'Mozilla/5.0'" "dirsearch custom user-agent"
# print_separator2;
# run_command "dirsearch -u http://$TARGET --headers 'Accept-Language: en-US'" "dirsearch custom headers"
# print_separator2;
# run_command "dirsearch -u http://$TARGET --cookie 'session=abc123'" "dirsearch with cookies"
# print_separator2;
# run_command "dirsearch -u https://$TARGET" "dirsearch basic"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -x .php,.html" "dirsearch with extensions"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -r" "dirsearch recursive"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -e .php,.html" "dirsearch specific extensions"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -t 10" "dirsearch threads"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -o output.txt" "dirsearch output to file"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -s" "dirsearch silent mode"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -p proxy" "dirsearch with proxy"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -f" "dirsearch follow redirects"
# print_separator2;
# run_command "dirsearch -u https://$TARGET -v" "dirsearch verbose output"
# print_separator2;
# run_command "dirsearch -u https://$TARGET --user-agent 'Mozilla/5.0'" "dirsearch custom user-agent"
# print_separator2;
# run_command "dirsearch -u https://$TARGET --headers 'Accept-Language: en-US'" "dirsearch custom headers"
# print_separator2;
# run_command "dirsearch -u https://$TARGET --cookie 'session=abc123'" "dirsearch with cookies"
# print_separator

# # Directory Scanning with gobuster no command worked
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt" "gobuster basic directory scan"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -x php,html" "gobuster directory scan with extensions"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -t 50" "gobuster directory scan with threads"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -o output.txt" "gobuster directory scan with output file"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -s 200,204,301,302" "gobuster directory scan with status codes"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -e" "gobuster directory scan with follow redirects"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt --proxy http://proxy" "gobuster directory scan with proxy"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt --user-agent 'Mozilla/5.0'" "gobuster directory scan with user-agent"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt --timeout 10" "gobuster directory scan with timeout"
# print_separator2;
# run_command "gobuster dns -d $TARGET -w wordlist.txt" "gobuster DNS subdomain enumeration"
# print_separator2;
# run_command "gobuster vhost -u http://$TARGET -w wordlist.txt" "gobuster virtual host discovery"
# print_separator2;
# run_command "gobuster dir -u http://$TARGET -w wordlist.txt -b txt" "gobuster directory scan excluding extensions"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt" "gobuster basic directory scan"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -x php,html" "gobuster directory scan with extensions"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -t 50" "gobuster directory scan with threads"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -o output.txt" "gobuster directory scan with output file"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -s 200,204,301,302" "gobuster directory scan with status codes"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -e" "gobuster directory scan with follow redirects"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt --proxy http://proxy" "gobuster directory scan with proxy"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt --user-agent 'Mozilla/5.0'" "gobuster directory scan with user-agent"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt --timeout 10" "gobuster directory scan with timeout"
# print_separator2;
# run_command "gobuster dns -d $TARGET -w wordlist.txt" "gobuster DNS subdomain enumeration"
# print_separator2;
# run_command "gobuster vhost -u https://$TARGET -w wordlist.txt" "gobuster virtual host discovery"
# print_separator2;
# run_command "gobuster dir -u https://$TARGET -w wordlist.txt -b txt" "gobuster directory scan excluding extensions"
# print_separator

# #Subdomain Enumeration with sublister no command runned
# run_command "sublister -d $TARGET" "sublister basic subdomain enumeration"
# print_separator2;
# run_command "sublister -d $TARGET -o output.txt" "sublister output to file"
# print_separator2;
# run_command "sublister -d $TARGET -t 50" "sublister with threads"
# print_separator2;
# run_command "sublister -d $TARGET -p http://proxy" "sublister with proxy"
# print_separator2;
# run_command "sublister -d $TARGET -u 'Mozilla/5.0'" "sublister with user-agent"
# print_separator2;
# run_command "sublister -d $TARGET -i subdomains.txt" "sublister with included subdomains"
# print_separator2;
# run_command "sublister -d $TARGET --no-wildcards" "sublister without wildcards"
# print_separator2;
# run_command "sublister -d $TARGET --exclude excluded.txt" "sublister excluding certain subdomains"
# print_separator2;
# run_command "sublister -d $TARGET --brute" "sublister with brute force"
# print_separator2;
# run_command "sublister -d $TARGET --api api-key" "sublister with API key"
# print_separator

# #Domain Enumeration with findomain no command runned
# run_command "findomain -t $TARGET" "findomain basic domain enumeration"
# print_separator2;
# run_command "findomain -t $TARGET -o output.txt" "findomain output to file"
# print_separator2;
# run_command "findomain -t $TARGET -p http://proxy" "findomain with proxy"
# print_separator2;
# run_command "findomain -t $TARGET -u 'Mozilla/5.0'" "findomain with user-agent"
# print_separator2;
# run_command "findomain -t $TARGET -i include.txt" "findomain with included subdomains"
# print_separator2;
# run_command "findomain -t $TARGET -b" "findomain with brute force"
# print_separator2;
# run_command "findomain -t $TARGET -r resolvers.txt" "findomain with custom resolvers"
# print_separator2;
# run_command "findomain -t $TARGET --api-key api-key" "findomain with API key"
# print_separator

# #Email and Data Source Enumeration with theharvester failed
# run_command "theharvester -d $TARGET -b all" "theharvester basic email enumeration"
# print_separator2;
# run_command "theharvester -d $TARGET -b all -e" "theharvester email enumeration with all data sources"
# print_separator2;
# run_command "theharvester -d $TARGET -b all -e -a" "theharvester email enumeration with all data sources and advanced search"
# print_separator2;
# run_command "theharvester -d $TARGET -b all -a" "theharvester all data sources without email search"run_command "theharvester -d $TARGET -100 -v -t -b anubis,baidu,bevigal,binaryedge,bing,bingapi,bufferoverun,brave,censys,certspotter,criminalip,crtsh,dnsdumpster,duckduckgo,fullhunt,github-code,hackertarget,hunter,hunterhow,intelx,netlas,onyphe,otx,pentesttools,projectdiscovery,rapiddns,rocketreach,securityTrails,sitedossier,subdomaincenter,subdomainfinderc99,threatminer,tomba,urlscan,virustotal,yahoo,zoomeye" "The Harvester scan"
# print_separator2;
# run_command "theharvester -d $TARGET -100 -v -t -b anubis,baidu,bevigal,binaryedge,bing,bingapi,bufferoverun,brave,censys,certspotter,criminalip,crtsh,dnsdumpster,duckduckgo,fullhunt,github-code,hackertarget,hunter,hunterhow,intelx,netlas,onyphe,otx,pentesttools,projectdiscovery,rapiddns,rocketreach,securityTrails,sitedossier,subdomaincenter,subdomainfinderc99,threatminer,tomba,urlscan,virustotal,yahoo,zoomeye" "The Harvester scan"
# print_separator2;
# run_command "theharvester -d $TARGET -l 100 -v -t -b anubis,baidu,bevigal,binaryedge,bing,bingapi,bufferoverrun,brave,censys,certspotter,criminalip,crtsh,dnsdumpster,duckduckgo,fullhunt,github-code,hackertarget,hunter,hunterhow,intelx,netlas,onyphe,otx,pentesttools,projectdiscovery,rapiddns,rocketreach,securityTrails,sitedossier,subdomaincenter,subdomainfinderc99,threatminer,tomba,urlscan,virustotal,yahoo,zoomeye" "The Harvester scan"
# print_separator2;
# run_command "theharvester -d $TARGET -l 100 -v -t -b anubis,baidu,bevigal,binaryedge,bing,bingapi,bufferoverrun,brave,censys,certspotter,criminalip,crtsh,dnsdumpster,duckduckgo,fullhunt,github-code,hackertarget,hunter,hunterhow,intelx,netlas,onyphe,otx,pentesttools,projectdiscovery,rapiddns,rocketreach,securitytrails,sitedossier,subdomaincenter,subdomainfinderc99,threatminer,tomba,urlscan,virustotal,yahoo,zoomeye" \
# "The Harvester scan"
# print_separator

# #Directory Traversal Scanning with dotdotpwn works fine
# run_command "dotdotpwn -m http -h http://$TARGET -a" "dotdotpwn directory traversal attack"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -d" "dotdotpwn directory traversal with depth"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -f" "dotdotpwn directory traversal with fuzzing"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -r" "dotdotpwn directory traversal with recursion"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -s" "dotdotpwn directory traversal with specific string"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -t" "dotdotpwn directory traversal with threads"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -b bruteforce.txt" "dotdotpwn directory traversal with brute force list"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -c config-file.txt" "dotdotpwn directory traversal with config file"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -l log-file.txt" "dotdotpwn directory traversal with log file"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET -x" "dotdotpwn directory traversal with XML output"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET --proxy http://proxy" "dotdotpwn directory traversal with proxy"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET --user-agent 'Mozilla/5.0'" "dotdotpwn directory traversal with user-agent"
# print_separator2;
# run_command "dotdotpwn -m http -h http://$TARGET --timeout 10" "dotdotpwn directory traversal with timeout"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -a" "dotdotpwn directory traversal attack"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -d" "dotdotpwn directory traversal with depth"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -f" "dotdotpwn directory traversal with fuzzing"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -r" "dotdotpwn directory traversal with recursion"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -s" "dotdotpwn directory traversal with specific string"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -t" "dotdotpwn directory traversal with threads"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -b bruteforce.txt" "dotdotpwn directory traversal with brute force list"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -c config-file.txt" "dotdotpwn directory traversal with config file"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -l log-file.txt" "dotdotpwn directory traversal with log file"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET -x" "dotdotpwn directory traversal with XML output"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET --proxy http://proxy" "dotdotpwn directory traversal with proxy"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET --user-agent 'Mozilla/5.0'" "dotdotpwn directory traversal with user-agent"
# print_separator2;
# run_command "dotdotpwn -u https://$TARGET --timeout 10" "dotdotpwn directory traversal with timeout"
# print_separator

# #sqlmap to test
# run_command "sqlmap -u http://$TARGET" "sqlmap basic scan"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --data 'id=1'" "sqlmap with POST data"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --cookie 'session=abc123'" "sqlmap with cookie"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --headers 'Accept-Language: en-US'" "sqlmap with custom headers"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --method POST" "sqlmap with POST method"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --proxy http://proxy.example.com" "sqlmap with proxy"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --user-agent 'Mozilla/5.0'" "sqlmap with custom user-agent"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --timeout 30" "sqlmap with timeout"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --batch" "sqlmap non-interactive mode"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --dbs" "sqlmap list databases"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --tables -d mydatabase" "sqlmap list tables in database"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --columns -d mydatabase -t mytable" "sqlmap list columns in table"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --dump -d mydatabase -t mytable" "sqlmap dump table data"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --dump-all" "sqlmap dump all data"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --os-shell" "sqlmap open OS shell"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --file-read '/etc/passwd'" "sqlmap read file"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --file-write '/tmp/test.txt'" "sqlmap write file"
# print_separator2;
# run_command "sqlmap -u http://$TARGET --crawl 2" "sqlmap crawl with depth 2"
# print_separator2;
# run_command "sqlmap -u https://$TARGET" "sqlmap basic scan"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --data 'id=1'" "sqlmap with POST data"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --cookie 'session=abc123'" "sqlmap with cookie"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --headers 'Accept-Language: en-US'" "sqlmap with custom headers"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --method POST" "sqlmap with POST method"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --proxy http://proxy.example.com" "sqlmap with proxy"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --user-agent 'Mozilla/5.0'" "sqlmap with custom user-agent"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --timeout 30" "sqlmap with timeout"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --batch" "sqlmap non-interactive mode"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --dbs" "sqlmap list databases"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --tables -d mydatabase" "sqlmap list tables in database"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --columns -d mydatabase -t mytable" "sqlmap list columns in table"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --dump -d mydatabase -t mytable" "sqlmap dump table data"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --dump-all" "sqlmap dump all data"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --os-shell" "sqlmap open OS shell"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --file-read '/etc/passwd'" "sqlmap read file"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --file-write '/tmp/test.txt'" "sqlmap write file"
# print_separator2;
# run_command "sqlmap -u https://$TARGET --crawl 2" "sqlmap crawl with depth 2"
# print_separator

# #nosqlmap to git clone
# run_command "nosqlmap -u http://$TARGET" "nosqlmap basic scan"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --data 'id=1'" "nosqlmap with POST data"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --cookie 'session=abc123'" "nosqlmap with cookie"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --headers 'Accept-Language: en-US'" "nosqlmap with custom headers"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --proxy http://proxy.example.com" "nosqlmap with proxy"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --user-agent 'Mozilla/5.0'" "nosqlmap with custom user-agent"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --timeout 30" "nosqlmap with timeout"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --dbs" "nosqlmap list databases"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --collections -d mydatabase" "nosqlmap list collections in database"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --dump -d mydatabase -c mycollection" "nosqlmap dump collection data"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --eval 'db.users.find()'" "nosqlmap evaluate JavaScript"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --file-read '/etc/passwd'" "nosqlmap read file"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --file-write '/tmp/test.txt'" "nosqlmap write file"
# print_separator2;
# run_command "nosqlmap -u http://$TARGET --os-shell" "nosqlmap open OS shell"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET" "nosqlmap basic scan"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --data 'id=1'" "nosqlmap with POST data"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --cookie 'session=abc123'" "nosqlmap with cookie"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --headers 'Accept-Language: en-US'" "nosqlmap with custom headers"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --proxy http://proxy.example.com" "nosqlmap with proxy"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --user-agent 'Mozilla/5.0'" "nosqlmap with custom user-agent"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --timeout 30" "nosqlmap with timeout"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --dbs" "nosqlmap list databases"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --collections -d mydatabase" "nosqlmap list collections in database"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --dump -d mydatabase -c mycollection" "nosqlmap dump collection data"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --eval 'db.users.find()'" "nosqlmap evaluate JavaScript"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --file-read '/etc/passwd'" "nosqlmap read file"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --file-write '/tmp/test.txt'" "nosqlmap write file"
# print_separator2;
# run_command "nosqlmap -u https://$TARGET --os-shell" "nosqlmap open OS shell"
# print_separator

# # #commix to test
# DO NOT UNCOMMENT -----------------------------------
# run_command "commix -u http://$TARGET" "commix basic scan"
# print_separator2;
# run_command "commix -u http://$TARGET --data 'id=1'" "commix with POST data"
# print_separator2;
# run_command "commix -u http://$TARGET --cookie 'session=abc123'" "commix with cookie"
# print_separator2;
# run_command "commix -u http://$TARGET --headers 'Accept-Language: en-US'" "commix with custom headers"
# print_separator2;
# run_command "commix -u http://$TARGET --proxy http://proxy.example.com" "commix with proxy"
# print_separator2;
# run_command "commix -u http://$TARGET --user-agent 'Mozilla/5.0'" "commix with custom user-agent"
# print_separator2;
# run_command "commix -u http://$TARGET --timeout 30" "commix with timeout"
# print_separator2;
# run_command "commix -u http://$TARGET --level 5" "commix with level 5"
# print_separator2;
# run_command "commix -u http://$TARGET --risk 3" "commix with risk 3"
# print_separator2;
# run_command "commix -u http://$TARGET --batch" "commix non-interactive mode"
# print_separator2;
# run_command "commix -u http://$TARGET --dbs" "commix list databases"
# print_separator2;
# run_command "commix -u http://$TARGET --tables -d mydatabase" "commix list tables in database"
# print_separator2;
# run_command "commix -u http://$TARGET --columns -d mydatabase -t mytable" "commix list columns in table"
# print_separator2;
# run_command "commix -u http://$TARGET --dump -d mydatabase -t mytable" "commix dump table data"
# print_separator2;
# run_command "commix -u http://$TARGET --os-shell" "commix open OS shell"
# print_separator2;
# run_command "commix -u http://$TARGET --file-read '/etc/passwd'" "commix read file"
# print_separator2;
# run_command "commix -u http://$TARGET --file-write '/tmp/test.txt'" "commix write file"
# print_separator2;
# run_command "commix -u http://$TARGET --eval 'db.users.find()'" "commix evaluate JavaScript"
# print_separator2;
# run_command "commix -u https://$TARGET" "commix basic scan"
# ------------------DO NOT UNCOMMENT 



print_separator2;
run_command "commix -u https://$TARGET --data 'id=1'" "commix with POST data"




# ------------------------------------------do not uncomment the below section
# print_separator2;
# run_command "commix -u https://$TARGET --cookie 'session=abc123'" "commix with cookie"
# print_separator2;
# run_command "commix -u https://$TARGET --headers 'Accept-Language: en-US'" "commix with custom headers"
# print_separator2;
# run_command "commix -u https://$TARGET --user-agent 'Mozilla/5.0'" "commix with custom user-agent"
# print_separator2;
# run_command "commix -u https://$TARGET --timeout 30" "commix with timeout"
# print_separator2;
# run_command "commix -u https://$TARGET --level 5" "commix with level 5"
# print_separator2;
# run_command "commix -u https://$TARGET --risk 3" "commix with risk 3"
# print_separator2;
# run_command "commix -u https://$TARGET --batch" "commix non-interactive mode"
# print_separator2;
# run_command "commix -u https://$TARGET --dbs" "commix list databases"
# print_separator2;
# run_command "commix -u https://$TARGET --tables -d mydatabase" "commix list tables in database"
# print_separator2;
# run_command "commix -u https://$TARGET --columns -d mydatabase -t mytable" "commix list columns in table"
# print_separator2;
# run_command "commix -u https://$TARGET --dump -d mydatabase -t mytable" "commix dump table data"
# print_separator2;
# run_command "commix -u https://$TARGET --os-shell" "commix open OS shell"
# print_separator2;
# run_command "commix -u https://$TARGET --file-read '/etc/passwd'" "commix read file"
# print_separator2;
# run_command "commix -u https://$TARGET --file-write '/tmp/test.txt'" "commix write file"
# print_separator2;
# run_command "commix -u https://$TARGET --eval 'db.users.find()'" "commix evaluate JavaScript"
# print_separator
# -----------------------------------------------------------

# #nikto will run 
run_command "nikto -h http://$TARGET" "nikto basic scan"
print_separator2;
run_command "nikto -h http://$TARGET -T 30" "nikto with timeout 30"
print_separator2;
run_command "nikto -h http://$TARGET -C all" "nikto check all plugins"
print_separator2;
run_command "nikto -h http://$TARGET -e 'php,asp'" "nikto with extensions"
print_separator2;
run_command "nikto -h http://$TARGET -id 'user:pass'" "nikto with credentials"
print_separator2;
run_command "nikto -h http://$TARGET -useragent 'Mozilla/5.0'" "nikto with custom user-agent"
print_separator2;
run_command "nikto -h http://$TARGET -s '200,301,302'" "nikto with specific status codes"
print_separator2;
run_command "nikto -h https://$TARGET" "nikto basic scan"
print_separator2;
run_command "nikto -h https://$TARGET -T 30" "nikto with timeout 30"
print_separator2;
run_command "nikto -h https://$TARGET -C all" "nikto check all plugins"
print_separator2;
run_command "nikto -h https://$TARGET -e 'php,asp'" "nikto with extensions"
print_separator2;
run_command "nikto -h https://$TARGET -id 'user:pass'" "nikto with credentials"
print_separator2;
run_command "nikto -h https://$TARGET -useragent 'Mozilla/5.0'" "nikto with custom user-agent"
print_separator2;
run_command "nikto -h https://$TARGET -s '200,301,302'" "nikto with specific status codes"
print_separator2;
run_command "nikto -h https://$TARGET --ssl" "nikto SSL scan"
print_separator

#nuclei to test
run_command "nuclei -u http://$TARGET" "nuclei basic scan"
print_separator2;
run_command "nuclei -u https://$TARGET" "nuclei basic scan"
print_separator

# sniper  
run_command "sniper -t $TARGET" "sniper basic scan"
print_separator2;
run_command "sniper -t $TARGET -m stealth" "sniper stealth mode"
print_separator2;
run_command "sniper -t $TARGET -m nuke" "sniper nuke mode"
print_separator2;
run_command "sniper -t $TARGET -m recon" "sniper reconnaissance mode"
print_separator2;
run_command "sniper -t $TARGET -m web" "sniper web mode"
print_separator

# #Nmap scans
echo -e "\nRunning Nmap scans:"
print_separator2;
run_command "nmap $TARGET" "Nmap scan"
print_separator2;
run_command "nmap -sS $TARGET" "Nmap SYN scan"
print_separator2;
run_command "nmap -sT $TARGET" "Nmap TCP connect scan"
print_separator2;
run_command "nmap -sU $TARGET" "Nmap UDP scan"
print_separator2;
run_command "nmap -p 22,80,443 $TARGET" "Nmap port scan"
print_separator2;
run_command "nmap -p- $TARGET" "Nmap all ports scan"
print_separator2;
run_command "nmap -sV $TARGET" "Nmap version detection"
print_separator2;
run_command "nmap -O $TARGET" "Nmap OS detection"
print_separator2;
run_command "nmap -A $TARGET" "Nmap aggressive scan"
print_separator2;
run_command "nmap -T4 $TARGET" "Nmap faster scan"
print_separator2;
run_command "nmap --script vuln $TARGET" "Nmap vulnerability scan"
print_separator2;
run_command "nmap -p- -sV -sC --script vuln $TARGET" "service detection and os detection"
print_separator2;
run_command "nmap -p- --script nmap-vulners -sV $TARGET" "Nmap CVE scanning"
print_separator

echo "All scans completed. Results saved in $LOGFILE"
echo "==========================================================================================="
